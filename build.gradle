buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

sourceCompatibility = "$javaVersion"
targetCompatibility = "$javaVersion"

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("org.webjars:bootstrap:${bootstrapVersion}")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.seleniumhq.selenium:selenium-java:${seleniumVersion}")
    testImplementation("io.rest-assured:rest-assured:${restAssuredVersion}")
    testImplementation("io.rest-assured:json-path:${restAssuredVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")
    testImplementation project(':')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperties = System.properties.stringPropertyNames().collectEntries {
        [(it): System.getProperty(it)]
    }
}

bootJar {
    archiveBaseName = 'feature-toggle-testing-with-spring-boot'
    classifier = "exec"
    archiveVersion = "$appVersion"
}

bootRun {
    sourceResources sourceSets.main

    systemProperties = System.properties.stringPropertyNames().collectEntries {
        [(it): System.getProperty(it)]
    }
}

jar {
    enabled = true
    archiveBaseName = 'feature-toggle-testing-with-spring-boot'
    archiveVersion = "$appVersion"
}